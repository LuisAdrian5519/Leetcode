class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {")": "(", "}": "{", "]": "["}

        for char in s:
            # Si es un corchete de apertura, lo agregamos al stack.
            if char in mapping.values():
                stack.append(char)
            # Si es un corchete de cierre...
            elif char in mapping.keys():
                # Verificamos si el stack está vacío (no hay un corchete de apertura correspondiente).
                if not stack or mapping[char] != stack.pop():
                    return False
            # Cualquier otro carácter es inválido.
            else:
                return False

        # Al final, el stack debe estar vacío para que la cadena sea válida.
        return not stack